(dp1
S'output'
p2
S"<type 'exceptions.UnboundLocalError'> local variable 'preguntas' referenced before assignment"
p3
sS'layer'
p4
S'/opt/python/web2py-files/web2py/applications/proyect/controllers/estudiante.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\ndef visor_preguntas():\n    \'\'\'\n    Implementaci\xc3\xb3n de un visor de preguntas de un diagn\xc3\xb3stico dado\n    \'\'\'\n    if request.cid:\n        pregunta = None\n        respuesta_id = None\n\n        diagnostico = db.diagnostico(request.args(0))\n\n        if diagnostico:\n            consulta = ((db.respuesta.diagnostico == diagnostico.id) & (db.respuesta.created_by == auth.user.id))\n\n            if len(preguntas) > len(db(consulta).select()):\n\n                preguntas = diagnostico.pregunta.select(orderby=db.pregunta.tipo)\n\n                respuesta = db(consulta).select(orderby=db.respuesta.created_on).last()\n\n                if respuesta:\n                    if respuesta.created_on != respuesta.modified_on:\n                        pregunta = preguntas[len(db(consulta).select())]\n                        respuesta_id = db.respuesta.insert(diagnostico=diagnostico.id)\n                    else:\n                        respuesta_id = respuesta.id\n                        pregunta = preguntas[len(db(consulta).select())-1]\n                else:\n                    pregunta = preguntas[len(db(consulta).select())]\n                    respuesta_id = db.respuesta.insert(diagnostico=diagnostico.id)\n\n                response.headers[\'web2py-component-flash\']=T(\'Siguiente Pregunta\')\n\n        return dict(pregunta=pregunta, respuesta_id=respuesta_id)\n    else:\n        raise HTTP(403)\n\ndef guardar_respuesta():\n    \'\'\'\n    Guardar una pregunta, petici\xc3\xb3n ajax\n    \'\'\'\n    import gluon.contrib.simplejson\n\n    if request.ajax:\n        variables = request.vars\n        respuesta = db.respuesta(request.vars.id)\n\n        respuesta.update_record(respuesta=gluon.contrib.simplejson.dumps({\'preguntas\': request.vars.pregunta, \'respuestas\': request.vars.respuesta}), aciertos=request.vars.aciertos, intrusiones=request.vars.intrusiones)\n\n        return gluon.contrib.simplejson.dumps({\'estado\': True})\n    else:\n        return gluon.contrib.simplejson.dumps({\'estado\': False})\n\ndef get_tiempo():\n    \'\'\'\n    Guardar una pregunta, petici\xc3\xb3n ajax\n    \'\'\'\n    import gluon.contrib.simplejson\n\n    if request.ajax:\n        diagnostico = db.diagnostico(request.vars.diagnostico)\n\n        if diagnostico:\n            respuesta_first = db((db.respuesta.diagnostico == diagnostico.id) & (db.respuesta.created_by == auth.user.id)).select(orderby=db.respuesta.created_on).first()\n            respuesta_last = db((db.respuesta.diagnostico == diagnostico.id) & (db.respuesta.created_by == auth.user.id)).select(orderby=db.respuesta.created_on).last()\n            if respuesta_first and respuesta_last:\n                if ((diagnostico.respuesta.count() == diagnostico.pregunta.count()) and (respuesta_last.respuesta)):\n                    time = respuesta_last.modified_on - respuesta_first.created_on\n                    return gluon.contrib.simplejson.dumps({\'time\': (1+time.seconds)*1000, \'start\': False})\n                time = request.now - respuesta_first.created_on\n                return gluon.contrib.simplejson.dumps({\'time\': (1+time.seconds)*1000, \'start\': True})\n            return gluon.contrib.simplejson.dumps({\'time\': 1000, \'start\': True})\n        else:\n            return gluon.contrib.simplejson.dumps({\'time\': None, \'start\': False})\n    else:\n        return gluon.contrib.simplejson.dumps({\'time\': None})\n\n@auth.requires_membership("Estudiante")\ndef cuestionario_diagnostico():\n    response.flash = T("Cuestionario de diagn\xc3\xb3stico")\n    response.title = T("Cuestionario de diagn\xc3\xb3stico") + response.title\n\n    diagnostico = db((db.diagnostico.activo == True) & (db.diagnostico.tipo == 0)).select().first()\n\n    return dict(diagnostico=diagnostico)\n\ndef diag_alternada():\n\n    response.title = T("Atenci\xc3\xb3n Alternada") + response.title\n    return dict()\n\ndef diag_dividida():\n\n    response.title = T("Atenci\xc3\xb3n Dividida") + response.title\n    return dict()\n\ndef diag_enfocada():\n\n    response.title = T("Atenci\xc3\xb3n Enfocada") + response.title\n    return dict()\n\ndef diag_selectiva():\n\n    response.title = T("Atenci\xc3\xb3n Selectiva") + response.title\n    return dict()\n\ndef diag_sostenida():\n\n    response.title = T("Atenci\xc3\xb3n Sostenida") + response.title\n    return dict()\n\ndef resultado_general():\n    response.flash = T("Resultado General")\n    response.title = T("Resultado General") + response.title\n    return dict()\n\ndef resultado_alternada():\n\n    response.title = T("Atenci\xc3\xb3n Alternada") + response.title\n    return dict()\n\ndef resultado_dividida():\n\n    response.title = T("Atenci\xc3\xb3n Dividida") + response.title\n    return dict()\n\ndef resultado_enfocada():\n\n    response.title = T("Atenci\xc3\xb3n Enfocada") + response.title\n    return dict()\n\ndef resultado_selectiva():\n\n    response.title = T("Atenci\xc3\xb3n Selectiva") + response.title\n    return dict()\n\ndef resultado_sostenida():\n\n    response.title = T("Atenci\xc3\xb3n Sostenida") + response.title\n    return dict()\n\nresponse._vars=response._caller(visor_preguntas)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/opt/python/web2py-files/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/opt/python/web2py-files/web2py/applications/proyect/controllers/estudiante.py", line 143, in <module>\n  File "/opt/python/web2py-files/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/python/web2py-files/web2py/applications/proyect/controllers/estudiante.py", line 16, in visor_preguntas\n    if len(preguntas) > len(db(consulta).select()):\nUnboundLocalError: local variable \'preguntas\' referenced before assignment\n'
p11
s.