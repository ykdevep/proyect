(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/mongo.py", line 83, in __init__\n    self.find_driver(adapter_args)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/base.py", line 192, in find_driver\n    raise RuntimeError("no driver available %s" % str(self.drivers))\nRuntimeError: no driver available (\'pymongo\',)\n'
p3
sS'layer'
p4
S'/opt/python/web2py-files/web2py/applications/proyect/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# -------------------------------------------------------------------------\n# This scaffolding model makes your app work on Google App Engine too\n# File is released under public domain and you can use without limitations\n# -------------------------------------------------------------------------\n\nif request.global_settings.web2py_version < "2.14.1":\n    raise HTTP(500, "Requires web2py 2.13.3 or newer")\n\n# -------------------------------------------------------------------------\n# if SSL/HTTPS is properly configured and you want all HTTP requests to\n# be redirected to HTTPS, uncomment the line below:\n# -------------------------------------------------------------------------\n# request.requires_https()\n\n# -------------------------------------------------------------------------\n# app configuration made easy. Look inside private/appconfig.ini\n# -------------------------------------------------------------------------\nfrom gluon.contrib.appconfig import AppConfig\n\n# -------------------------------------------------------------------------\n# once in production, remove reload=True to gain full speed\n# -------------------------------------------------------------------------\nmyconf = AppConfig(reload=True)\n\nif not request.env.web2py_runtime_gae:\n    # ---------------------------------------------------------------------\n    # if NOT running on Google App Engine use SQLite or other DB\n    # ---------------------------------------------------------------------\n    db = DAL(myconf.get(\'db.uri\'),\n             pool_size=myconf.get(\'db.pool_size\'),\n             migrate_enabled=myconf.get(\'db.migrate\'),\n             check_reserved=[\'all\'])\nelse:\n    # ---------------------------------------------------------------------\n    # connect to Google BigTable (optional \'google:datastore://namespace\')\n    # ---------------------------------------------------------------------\n    db = DAL(\'google:datastore+ndb\')\n    # ---------------------------------------------------------------------\n    # store sessions and tickets there\n    # ---------------------------------------------------------------------\n    session.connect(request, response, db=db)\n    # ---------------------------------------------------------------------\n    # or store session in Memcache, Redis, etc.\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\n    # ---------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# by default give a view/generic.extension to all actions from localhost\n# none otherwise. a pattern can be \'controller/function.extension\'\n# -------------------------------------------------------------------------\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n# -------------------------------------------------------------------------\n# choose a style for forms\n# -------------------------------------------------------------------------\nresponse.formstyle = myconf.get(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.get(\'forms.separator\') or \'\'\n\n# -------------------------------------------------------------------------\n# (optional) optimize handling of static files\n# -------------------------------------------------------------------------\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n# -------------------------------------------------------------------------\n# (optional) static assets folder versioning\n# -------------------------------------------------------------------------\n# response.static_version = \'0.0.0\'\n\n# -------------------------------------------------------------------------\n# Here is sample code if you need for\n# - email capabilities\n# - authentication (registration, login, logout, ... )\n# - authorization (role based authorization)\n# - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n# - old style crud actions\n# (more options discussed in gluon/tools.py)\n# -------------------------------------------------------------------------\n\nfrom gluon.tools import Auth, Service, PluginManager\n\n# host names must be a list of allowed host names (glob syntax allowed)\nauth = Auth(db, host_names=myconf.get(\'host.names\'))\nservice = Service()\nplugins = PluginManager()\n\ndb.define_table(\'centro\',\n    Field(\'nombre\', \'string\', default=\'\', label=T(\'Nombre del centro\')),\n    Field(\'nivel_educativo\', \'string\', default=\'\', label=T(\'Nivel Educativo\')),\n    Field(\'direccion\', \'string\', default=\'\', label=T(\'Direcci\xc3\xb3n\')),\n    format=\'%(nombre)s\')\n\ndb.centro._singular = T("Centro")\ndb.centro._plural = T("Centros")\n\ndb.centro.nivel_educativo.requires = IS_IN_SET({\'Presscolar\': T(\'Presscolar\'), \'Primaria\': T(\'Primaria\'), \'Secundaria\': T(\'Secundaria\'), \'Media Superior\': T(\'Media Superior\'), \'Superior\': T(\'Superior\')}, zero=T(\'Choose one\'), error_message=T(\'Choose one\'))\ndb.centro.nombre.requires = IS_NOT_EMPTY()\ndb.centro.direccion.requires = IS_NOT_EMPTY()\n\nauth.settings.extra_fields[\'auth_user\']= [\n  Field(\'centro\', \'reference centro\', label=T(\'Centro de procedencia\'))]\n\n# -------------------------------------------------------------------------\n# create all tables needed by auth if not custom tables\n# -------------------------------------------------------------------------\nauth.define_tables(username=False, signature=False)\n\ndb._common_fields.append(auth.signature)\n\n# -------------------------------------------------------------------------\n# configure email\n# -------------------------------------------------------------------------\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.get(\'smtp.server\')\nmail.settings.sender = myconf.get(\'smtp.sender\')\nmail.settings.login = myconf.get(\'smtp.login\')\nmail.settings.tls = myconf.get(\'smtp.tls\') or False\nmail.settings.ssl = myconf.get(\'smtp.ssl\') or False\n\n# -------------------------------------------------------------------------\n# configure auth policy\n# -------------------------------------------------------------------------\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\nauth.settings.create_user_groups = None\n\nauth.settings.remember_me_form = False\n\n# -------------------------------------------------------------------------\n# Define your tables below (or better in another model file) for example\n#\n# >>> db.define_table(\'mytable\', Field(\'myfield\', \'string\'))\n#\n# Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n#       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n# There is an implicit \'id integer autoincrement\' field\n# Consult manual for more options, validators, etc.\n#\n# More API examples for controllers:\n#\n# >>> db.mytable.insert(myfield=\'value\')\n# >>> rows = db(db.mytable.myfield == \'value\').select(db.mytable.ALL)\n# >>> for row in rows: print row.id, row.myfield\n# -------------------------------------------------------------------------\n\n# -------------------------------------------------------------------------\n# after defining tables, uncomment below to enable auditing\n# -------------------------------------------------------------------------\n# auth.enable_record_versioning(db)\n\nNEWS_WIDTH = 2340\nNEWS_HEIGTH = 600\n\ndb.define_table(\'banner\',\n   Field(\'titulo\', \'string\', label=T(\'T\xc3\xadtulo\')),\n   Field(\'imagen\', \'upload\', uploadseparate = True, autodelete=True, label=T(\'Imagen\'), comment=T(\'Image size \'+str(NEWS_WIDTH)+\'x\'+str(NEWS_HEIGTH))),\n   Field(\'publicar_en\', \'date\', default=request.now, label=T(\'Publicar en\')),\n   Field(\'habilitado\', \'boolean\', default=True, label=T(\'Est\xc3\xa1 habilitado\')),\n   format=\'%(titulo)s\')\n\ndb.banner._singular = T(\'Banner\')\ndb.banner._plural = T(\'Banners\')\n\ndb.banner.titulo.requires = IS_NOT_EMPTY()\ndb.banner.publicar_en.requires = IS_DATE()\ndb.banner.imagen.requires = [IS_EMPTY_OR(IS_IMAGE(extensions=(\'png\', \'jpg\', \'jpeg\'), maxsize=(NEWS_WIDTH, NEWS_HEIGTH),  error_message=T(\'Image news format (png, jpeg, jpg), maxsize \'+str(NEWS_WIDTH)+\'x\'+str(NEWS_HEIGTH))))]\n\ndb.banner.imagen.represent = lambda value, register: A(T(\'Click here for download or url copy\'), _href=URL(\'default\', \'download\', args=[value]))\n\ndb.define_table(\'nivel_atencional\',\n    Field(\'nombre\', \'string\', default=\'\', label=T(\'Nombre\'), comment=T(\'Atencion enfocada, Sostenida, Selectiva, Alternada, Dividida\')),\n    Field(\'descripcion\', \'text\', default=\'\', label=T(\'Descripcion\')),\n    format=\'%(nombre)s\')\n\ndb.nivel_atencional._singular = T(\'Nivel de atenci\xc3\xb3n\')\ndb.nivel_atencional._plural = T(\'Niveles de atenci\xc3\xb3n\')\n\ndb.nivel_atencional.nombre.requires = IS_NOT_EMPTY()\n\n\ndb.define_table(\'resultado_general\',\n    Field(\'fecha\', \'date\', default=request.now, label=T(\'Fecha\')),\n    Field(\'nivel_atencional\', \'reference nivel_atencional\', label=T(\'Nivel atencional\')),\n    Field(\'resultado\', \'string\', label=T(\'Resultado\')),\n    Field(\'observacion\', \'text\', default=\'\', label=T(\'Observaciones\')),\n    format=\'%(id)s\')\n\ndb.resultado_general._singular = T(\'Observaci\xc3\xb3n general\')\ndb.resultado_general._plural = T(\'Observaciones generales\')\n\ndb.resultado_general.fecha.requires = IS_DATE()\ndb.resultado_general.resultado.requires = IS_IN_SET({\'Mejor\': T(\'Mejor\'), \'Igual\': T(\'Igual\'), \'Peor\': T(\'Peor\')}, zero=T(\'Choose one\'), error_message=T(\'Choose one\'))\ndb.resultado_general.observacion.requires = IS_NOT_EMPTY()\n\n\ndb.define_table(\'ejercicio\',\n    Field(\'hora_inicio\', \'datetime\', default=request.now, label=T(\'Hora de inicio\')),\n    Field(\'hora_fin\', \'datetime\', default=request.now, label=T(\'Hora de fin\')),\n    Field(\'tiempo_completar\', \'double\', label=T(\'Tiempo en completar\')),\n    Field(\'nivel_atencional\', \'reference nivel_atencional\', label=T(\'Nivel atencional\')),\n    Field(\'estudiante\', \'reference auth_user\', label=T(\'Estudiante\')),\n    format=\'%(id)s\')\n\ndb.ejercicio._singular = T(\'Ejercicio\')\ndb.ejercicio._plural = T(\'Ejercicios\')\n\ndb.ejercicio.hora_inicio.requires = IS_DATETIME()\ndb.ejercicio.hora_fin.requires = IS_DATETIME()\n\ndb.ejercicio.tiempo_completar.compute = lambda r:r[\'hora_fin\']-r[\'hora_inicio\']\n\n\n#Control Resultados {id estudiante, id evaluador, id ejercicio, # aciertos, # intrusiones, # omisiones, hora de inicio, hora fin, tiempo ejecucion (lo que se demora desde que empieza hasta que termina), tiempo eficacia}\n\ndb.define_table(\'control_resultado\',\n    Field(\'hora_inicio\', \'datetime\', default=request.now, label=T(\'Hora de inicio\')),\n    Field(\'hora_fin\', \'datetime\', default=request.now, label=T(\'Hora de fin\')),\n    Field(\'tiempo_ejecucion\', \'double\', label=T(\'Tiempo ejecuci\xc3\xb3n\')),\n    Field(\'tiempo_eficacia\', \'double\', label=T(\'Tiempo eficacia\')),\n    Field(\'aciertos\', \'double\', label=T(\'N\xc3\xbamero de aciertos\')),\n    Field(\'intrusiones\', \'double\', label=T(\'N\xc3\xbamero de intrusiones\')),\n    Field(\'omisiones\', \'double\', label=T(\'N\xc3\xbamero de omisiones\')),\n    Field(\'ejercicio\', \'reference ejercicio\', label=T(\'Ejercicio\')),\n    Field(\'estudiante\', \'reference auth_user\', label=T(\'Estudiante\')),\n    Field(\'evaluador\', \'reference auth_user\', label=T(\'Evaluador\')),\n    format=\'%(id)s\')\n\ndb.control_resultado._singular = T(\'Control de resultado\')\ndb.control_resultado._plural = T(\'Control de resultados\')\n\ndb.control_resultado.hora_inicio.requires = IS_DATETIME()\ndb.control_resultado.hora_fin.requires = IS_DATETIME()\n\ndb.control_resultado.tiempo_ejecucion.compute = lambda r:r[\'hora_fin\']-r[\'hora_inicio\']\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/opt/python/web2py-files/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/opt/python/web2py-files/web2py/applications/proyect/models/db.py", line 34, in <module>\n    check_reserved=[\'all\'])\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/base.py", line 473, in __init__\n    "Failure to connect, tried %d times:\\n%s" % (attempts, tb)\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/mongo.py", line 83, in __init__\n    self.find_driver(adapter_args)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/base.py", line 192, in find_driver\n    raise RuntimeError("no driver available %s" % str(self.drivers))\nRuntimeError: no driver available (\'pymongo\',)\n\n'
p11
s.