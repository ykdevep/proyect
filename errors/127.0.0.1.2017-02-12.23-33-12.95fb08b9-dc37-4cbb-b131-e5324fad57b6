(dp1
S'output'
p2
S"<type 'exceptions.NotImplementedError'> How did you reach this line of code???"
p3
sS'layer'
p4
S'/opt/python/web2py-files/web2py/applications/proyect/controllers/especialista.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\ndef __validate(form, id_diagnostico, id_pregunta):\n    \'\'\'\n    Validando que exista un solo tipo de pregunta por cuestionario\n    \'\'\'\n    if id_pregunta:\n        pregunta = db((db.pregunta.diagnostico == id_diagnostico) & (db.pregunta.tipo == form.vars.tipo)).select().first()\n        if pregunta:\n            if str(pregunta.id) != id_pregunta:\n                form.errors.tipo = T("Ya existe una pregunta de tipo para este cuestionario")\n    else:\n        if not (db((db.pregunta.diagnostico == id_diagnostico) & (db.pregunta.tipo == form.vars.tipo)).isempty()):\n            form.errors.tipo = T("Ya existe una pregunta de tipo para este cuestionario")\n\ndef __total_puntos(id):\n    \'\'\'\n    Calculando los puntos de un cuestionario\n    \'\'\'\n    puntos = 0\n\n    for pregunta in db(db.pregunta.diagnostico == id).select():\n        puntos = puntos + (len(pregunta.juego_datos.split(\'|\')) * pregunta.puntos)\n\n    return A(CAT(XML(\'<i class="glyphicon glyphicon-ok"></i> \'), puntos), _class="btn btn-warning", **{\'_data-toggle\': "tooltip", \'_title\': T("Total de puntos del cuestionario"), \'_data-placement\': "top"})\n\n@auth.requires_membership("Especialista")\ndef gestionar_diagnostico():\n    \'\'\'\n    CRUD completo para gestionar diagnosticos kike tiene que ser asi\n    \'\'\'\n\n    diagnostico = preguntas = onvalidation = selectable = orderby = None\n    links = []\n\n    if (("pregunta.diagnostico" in request.args) and not("pregunta" in request.args)):\n        response.title = T(\'Gestionar preguntas del diagn\xc3\xb3stico\') + response.title\n        response.flash = T(\'Gestionar preguntas del diagn\xc3\xb3stico\')\n        mensaje = T(\'Gestionar preguntas del diagn\xc3\xb3stico con identificador: \') + request.args(-1)\n        diagnostico = db.diagnostico(request.args(2))\n        preguntas = db(db.pregunta.diagnostico == request.args(2)).select(orderby=db.pregunta.tipo)\n        selectable = lambda ids: db(db.pregunta.id.belongs(ids)).delete()\n        orderby = [db.pregunta.tipo]\n        onvalidation = lambda form : __validate(form, request.args(2), None)\n    elif (("pregunta.diagnostico" in request.args) and ("pregunta" in request.args) and ("new" in request.args)):\n        response.title = T(\'Pregunta del diagn\xc3\xb3stico\') + response.title\n        response.flash = T(\'Pregunta del diagn\xc3\xb3stico\')\n        mensaje = T(\'Pregunta del diagn\xc3\xb3stico\')\n        onvalidation = lambda form : __validate(form, request.args(2), None)\n    elif (("pregunta.diagnostico" in request.args) and ("pregunta" in request.args) and ("view" in request.args)):\n        response.title = T(\'Pregunta del diagn\xc3\xb3stico\') + response.title\n        response.flash = T(\'Pregunta del diagn\xc3\xb3stico\')\n        mensaje = T(\'Pregunta del diagn\xc3\xb3stico\')\n        onvalidation = lambda form : __validate(form, request.args(2), None)\n    elif (("pregunta.diagnostico" in request.args) and ("pregunta" in request.args) and ("edit" in request.args)):\n        response.title = T(\'Pregunta del diagn\xc3\xb3stico\') + response.title\n        response.flash = T(\'Pregunta del diagn\xc3\xb3stico\')\n        mensaje = T(\'Pregunta del diagn\xc3\xb3stico\')\n        onvalidation = lambda form : __validate(form, request.args(2), request.args(-1))\n    else:\n        response.title = T(\'Gestionar Diagn\xc3\xb3sticos\') + response.title\n        response.flash = T(\'Gestionar Diagn\xc3\xb3sticos\')\n        mensaje = T(\'Gestionar Diagn\xc3\xb3sticos\')\n        selectable = lambda ids: db(db.diagnostico.id.belongs(ids)).delete()\n        orderby = [db.diagnostico.tipo|~db.diagnostico.activo]\n\n        links.append({\'header\': T(\'Total de puntos\'), \'body\': lambda row: __total_puntos(row.id)})\n\n    grid = SQLFORM.smartgrid(db.diagnostico, selectable=selectable, links=links, orderby=orderby, onvalidation=onvalidation)\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n\n    return dict(grid=grid, mensaje=mensaje, diagnostico=diagnostico, preguntas=preguntas)\n\n@auth.requires_membership("Especialista")\ndef nuevo_diagnostico_inicial():\n    response.flash = T("Nuevo Diagn\xc3\xb3stico Inicial")\n    response.title = T("Nuevo Diagn\xc3\xb3stico Inicial") + response.title\n\n    form = SQLFORM(db.diagnostico, fields=[\'titulo\', \'descripcion\', \'activo\'])\n\n    if form.validate():\n        diagnostico = dict(form.vars)\n        diagnostico[\'tipo\'] = 0\n        form.vars.id = db.diagnostico.insert(**diagnostico)\n\n        response.flash = T(\'Nuevo cuestionario Diagn\xc3\xb3stico Inicial insertado\')\n\n    elif form.errors:\n        response.flash = T(\'El formulario tiene errores\')\n    else:\n        response.flash = T(\'Por favor complete el formulario\')\n    return dict(form=form)\n\nresponse._vars=response._caller(gestionar_diagnostico)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/opt/python/web2py-files/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/opt/python/web2py-files/web2py/applications/proyect/controllers/especialista.py", line 97, in <module>\n  File "/opt/python/web2py-files/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/python/web2py-files/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/opt/python/web2py-files/web2py/applications/proyect/controllers/especialista.py", line 69, in gestionar_diagnostico\n    grid = SQLFORM.smartgrid(db.diagnostico, selectable=selectable, links=links, orderby=orderby, onvalidation=onvalidation)\n  File "/opt/python/web2py-files/web2py/gluon/sqlhtml.py", line 3102, in smartgrid\n    user_signature=user_signature, **kwargs)\n  File "/opt/python/web2py-files/web2py/gluon/sqlhtml.py", line 2352, in grid\n    next=referrer)\n  File "/opt/python/web2py-files/web2py/gluon/html.py", line 2298, in process\n    self.validate(**kwargs)\n  File "/opt/python/web2py-files/web2py/gluon/html.py", line 2236, in validate\n    if self.accepts(**kwargs):\n  File "/opt/python/web2py-files/web2py/gluon/sqlhtml.py", line 1744, in accepts\n    self.id_field_name]).update(**fields)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/objects.py", line 2054, in update\n    ret = db._adapter.update("%s" % table._tablename, self.query, fields)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/mongo.py", line 981, in update\n    expanded = MongoDBAdapter.Expanded(self, \'update\', query, fields)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/mongo.py", line 371, in __init__\n    self._expand_fields(self._fields_loop_abort)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/mongo.py", line 492, in _expand_fields\n    self._expand_field(field, value, mid_loop)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/mongo.py", line 503, in _expand_field\n    expanded = self.adapter.expand(value, field.type)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/mongo.py", line 717, in expand\n    #raise NotImplementedError("How did you reach this line of code???")\nNotImplementedError: How did you reach this line of code???\n'
p11
s.