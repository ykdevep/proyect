(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> object_id argument must be of type ObjectId or an objectid representable integer (type <class 'pydal.objects.Field'>)"
p3
sS'layer'
p4
S'/opt/python/web2py-files/web2py/applications/proyect/controllers/especialista.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\ndef get_pregunta():\n    \'\'\'\n    Componente que devuelve las preguntas de un tipo dado para el cuestionario activo\n    \'\'\'\n    if request.cid:\n        preguntas = db((db.pregunta.diagnostico == request.args(0)) & (db.pregunta.tipo == request.args(1))).select(orderby=db.pregunta.ensayo|db.pregunta.created_on)\n        return dict(preguntas=preguntas)\n    else:\n        raise HTTP(403)\n\ndef __total_puntos(id):\n    \'\'\'\n    Calculando total de puntos de un cuestionario\n    \'\'\'\n    suma = db.pregunta.puntos.sum()\n    puntos = db(db.pregunta.diagnostico == id).select(suma).first()[suma]\n    return A(CAT(XML(\'<i class="glyphicon glyphicon-ok"></i> \'), puntos), _class="btn btn-warning", **{\'_data-toggle\': "tooltip", \'_title\': T("Total de puntos del cuestionario"), \'_data-placement\': "top"})\n\n@auth.requires_membership("Especialista")\ndef gestionar_diagnostico():\n    \'\'\'\n    CRUD completo para gestionar diagnosticos kike tiene que ser asi\n    \'\'\'\n\n    diagnostico = preguntas = selectable = orderby = total_puntos = fields = None\n    links = []\n    linked_tables=[]\n\n    if (("pregunta.diagnostico" in request.args) and not("pregunta" in request.args)):\n        response.title = T(\'Gestionar preguntas del diagn\xc3\xb3stico\') + response.title\n        response.flash = T(\'Gestionar preguntas del diagn\xc3\xb3stico\')\n        mensaje = T(\'Gestionar preguntas del diagn\xc3\xb3stico con identificador: \') + request.args(-1)\n        diagnostico = db.diagnostico(request.args(2))\n        total_puntos = __total_puntos(diagnostico.id)\n        preguntas = diagnostico.pregunta.select(orderby=db.pregunta.tipo|db.pregunta.ensayo)\n        selectable = lambda ids: db(db.pregunta.id.belongs(ids)).delete()\n        orderby = [db.pregunta.tipo|db.pregunta.ensayo|db.pregunta.created_on]\n        fields = [db.pregunta.texto, db.pregunta.tipo, db.pregunta.ensayo, db.pregunta.puntos, db.pregunta.tiempo, db.pregunta.intentos]\n    elif (("pregunta.diagnostico" in request.args) and ("pregunta" in request.args) and ("new" in request.args)):\n        response.title = T(\'Pregunta del diagn\xc3\xb3stico\') + response.title\n        response.flash = T(\'Pregunta del diagn\xc3\xb3stico\')\n        mensaje = T(\'Pregunta del diagn\xc3\xb3stico\')\n    elif (("pregunta.diagnostico" in request.args) and ("pregunta" in request.args) and ("view" in request.args)):\n        response.title = T(\'Pregunta del diagn\xc3\xb3stico\') + response.title\n        response.flash = T(\'Pregunta del diagn\xc3\xb3stico\')\n        mensaje = T(\'Pregunta del diagn\xc3\xb3stico\')\n    elif (("pregunta.diagnostico" in request.args) and ("pregunta" in request.args) and ("edit" in request.args)):\n        response.title = T(\'Pregunta del diagn\xc3\xb3stico\') + response.title\n        response.flash = T(\'Pregunta del diagn\xc3\xb3stico\')\n        mensaje = T(\'Pregunta del diagn\xc3\xb3stico\')\n    else:\n        response.title = T(\'Gestionar Diagn\xc3\xb3sticos\') + response.title\n        response.flash = T(\'Gestionar Diagn\xc3\xb3sticos\')\n        mensaje = T(\'Gestionar Diagn\xc3\xb3sticos\')\n        selectable = lambda ids: db(db.diagnostico.id.belongs(ids)).delete()\n        orderby = [db.diagnostico.tipo|~db.diagnostico.activo]\n        linked_tables = [db.pregunta]\n\n        links.append({\'header\': T(\'Total de puntos\'), \'body\': lambda row: __total_puntos(row.id)})\n\n    grid = SQLFORM.smartgrid(db.diagnostico, selectable=selectable, linked_tables=linked_tables, links=links, fields=fields, orderby=orderby)\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n\n    return dict(grid=grid, mensaje=mensaje, diagnostico=diagnostico, preguntas=preguntas, total_puntos=total_puntos)\n\n@auth.requires_membership("Especialista")\ndef nuevo_diagnostico_inicial():\n    response.flash = T("Nuevo Diagn\xc3\xb3stico Inicial")\n    response.title = T("Nuevo Diagn\xc3\xb3stico Inicial") + response.title\n\n    form = SQLFORM(db.diagnostico, fields=[\'titulo\', \'descripcion\' \'activo\', \'tiempo\'])\n\n    if form.validate():\n        diagnostico = dict(form.vars)\n        diagnostico[\'tipo\'] = 0\n        form.vars.id = db.diagnostico.insert(**diagnostico)\n\n        response.flash = T(\'Nuevo cuestionario Diagn\xc3\xb3stico Inicial insertado\')\n\n    elif form.errors:\n        response.flash = T(\'El formulario tiene errores\')\n    else:\n        response.flash = T(\'Por favor complete el formulario\')\n    return dict(form=form)\n\nresponse._vars=response._caller(gestionar_diagnostico)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/opt/python/web2py-files/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/opt/python/web2py-files/web2py/applications/proyect/controllers/especialista.py", line 91, in <module>\n  File "/opt/python/web2py-files/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/python/web2py-files/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/opt/python/web2py-files/web2py/applications/proyect/controllers/especialista.py", line 37, in gestionar_diagnostico\n    preguntas = diagnostico.pregunta.select(orderby=db.pregunta.tipo|db.pregunta.ensayo)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/objects.py", line 2188, in select\n    return self._getset().select(*fields, **attributes)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/mongo.py", line 813, in select\n    if str(orderby) == \'<random>\':\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/objects.py", line 1126, in __str__\n    return str(self.db._adapter.expand(self, self.type))\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/mongo.py", line 699, in expand\n    second = self.object_id(expression.second)\n  File "/opt/python/web2py-files/web2py/gluon/packages/dal/pydal/adapters/mongo.py", line 176, in object_id\n    " (type %s)" % type(arg) )\nTypeError: object_id argument must be of type ObjectId or an objectid representable integer (type <class \'pydal.objects.Field\'>)\n'
p11
s.