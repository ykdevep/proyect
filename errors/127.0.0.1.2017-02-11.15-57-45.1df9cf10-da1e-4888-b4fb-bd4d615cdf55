(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Table' object has no attribute 'centro'"
p3
sS'layer'
p4
S'/opt/python/web2py-files/web2py/applications/proyect/controllers/admin.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n@auth.requires_membership("Administrador")\ndef users():\n    selectable = lambda ids: db(db.auth_user.id.belongs(ids)).delete()\n\n    fields = [db.auth_user.first_name, db.auth_user.email, db.auth_user.centro]\n\n    grid = SQLFORM.smartgrid(db.auth_user, selectable=selectable, linked_tables=[db.auth_membership], exportclasses=dict(xml=False, html=False, json=False, csv_with_hidden_cols=False, tsv_with_hidden_cols=False))\n\n    response.flash = T("Administrar usuarios")\n    response.title = T("Administrar usuarios") + response.title\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n    return dict(grid=grid)\n\n@auth.requires_membership("Administrador")\ndef new_admin():\n\n    response.title = T("Nuevo Administrador") + response.title\n\n    form = SQLFORM(db.auth_user)\n\n    if form.validate():\n        group = db(db.auth_group.role == "Administrador").select().first()\n\n        if group:\n            form.vars.id = db.auth_user.insert(**dict(form.vars))\n            db.auth_membership.insert(user_id=form.vars.id, group_id=group.id)\n            response.flash = T(\'Nuevo Administrador insertado\')\n        else:\n            response.flash = T(\'No hay grupo denominado "Administrador"\')\n    elif form.errors:\n        response.flash = T(\'El formulario tiene errores\')\n    else:\n        response.flash = T(\'Por favor complete el formulario\')\n    return dict(form=form)\n\n@auth.requires_membership("Administrador")\ndef new_student():\n\n    response.title = T("Nuevo Estudiante") + response.title\n\n    form = SQLFORM(db.auth_user)\n\n    if form.validate():\n        group = db(db.auth_group.role == "Estudiante").select().first()\n\n        if group:\n            form.vars.id = db.auth_user.insert(**dict(form.vars))\n            db.auth_membership.insert(user_id=form.vars.id, group_id=group.id)\n            response.flash = T(\'Nuevo Estudiante insertado\')\n        else:\n            response.flash = T(\'No hay grupo denominado "Estudiante"\')\n    elif form.errors:\n        response.flash = T(\'El formulario tiene errores\')\n    else:\n        response.flash = T(\'Por favor complete el formulario\')\n    return dict(form=form)\n\n@auth.requires_membership("Especialista")\ndef new_revisor():\n\n    response.title = T("Nuevo Especialista") + response.title\n\n    form = SQLFORM(db.auth_user)\n\n    if form.validate():\n        group = db(db.auth_group.role == "Especialista").select().first()\n\n        if group:\n            form.vars.id = db.auth_user.insert(**dict(form.vars))\n            db.auth_membership.insert(user_id=form.vars.id, group_id=group.id)\n            response.flash = T(\'Nuevo Especialista insertado\')\n        else:\n            response.flash = T(\'No hay grupo denominado "Especialista"\')\n    elif form.errors:\n        response.flash = T(\'El formulario tiene errores\')\n    else:\n        response.flash = T(\'Por favor complete el formulario\')\n    return dict(form=form)\n\n@auth.requires_membership("Especialista")\ndef new_user():\n\n    response.title = T("Nuevo Visitante") + response.title\n\n    form = SQLFORM(db.auth_user)\n\n    if form.validate():\n        group = db(db.auth_group.role == "Visitante").select().first()\n\n        if group:\n            form.vars.id = db.auth_user.insert(**dict(form.vars))\n            db.auth_membership.insert(user_id=form.vars.id, group_id=group.id)\n            response.flash = T(\'Nuevo Visitante insertado\')\n        else:\n            response.flash = T(\'No hay grupo denominado "Visitante"\')\n    elif form.errors:\n        response.flash = T(\'El formulario tiene errores\')\n    else:\n        response.flash = T(\'Por favor complete el formulario\')\n    return dict(form=form)\n\n@auth.requires_membership("Administrador")\ndef centros():\n    selectable = lambda ids: db(db.centro.id.belongs(ids)).delete()\n\n    fields = [db.centro.nombre, db.centro.nivel_educativo, db.centro.direccion]\n\n    grid = SQLFORM.smartgrid(db.centro, selectable=selectable, linked_tables=[], exportclasses=dict(xml=False, html=False, json=False, csv_with_hidden_cols=False, tsv_with_hidden_cols=False))\n\n    response.flash = T("Administrar centros")\n    response.title = T("Administrar Centros") + response.title\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n    return dict(grid=grid)\n\n@auth.requires_membership("Administrador")\ndef logs():\n    selectable = lambda ids: db(db.banner.id.belongs(ids)).delete()\n\n    grid = SQLFORM.smartgrid(db.auth_event, selectable=selectable, linked_tables=[], exportclasses=dict(xml=False, html=False, json=False, csv_with_hidden_cols=False, tsv_with_hidden_cols=False))\n\n    response.flash = T("Administrar logs")\n    response.title = T("Administrar logs") + response.title\n\n    heading=grid.elements(\'th\')\n    if heading:\n           heading[0].append(INPUT(_type=\'checkbox\', _onclick="jQuery(\'input[type=checkbox]\').each(function(k){jQuery(this).attr(\'checked\', \'checked\');});"))\n    return dict(grid=grid)\n\nresponse._vars=response._caller(users)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/opt/python/web2py-files/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/opt/python/web2py-files/web2py/applications/proyect/controllers/admin.py", line 138, in <module>\n  File "/opt/python/web2py-files/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/python/web2py-files/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/opt/python/web2py-files/web2py/applications/proyect/controllers/admin.py", line 8, in users\n    fields = [db.auth_user.first_name, db.auth_user.email, db.auth_user.centro]\nAttributeError: \'Table\' object has no attribute \'centro\'\n'
p11
s.