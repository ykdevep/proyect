(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> datetime.timedelta(0, 1775, 431058) is not JSON serializable"
p3
sS'layer'
p4
S'/opt/python/web2py-files/web2py/applications/proyect/controllers/estudiante.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\ndef visor_preguntas():\n    \'\'\'\n    Implementaci\xc3\xb3n de un visor de preguntas de un diagn\xc3\xb3stico dado\n    \'\'\'\n    if request.cid:\n        diagnostico = db.diagnostico(request.args(0))\n        pregunta = None\n        respuesta = None\n\n        if diagnostico:\n            preguntas = diagnostico.pregunta.select(orderby=db.pregunta.tipo)\n            contador = db((db.respuesta.diagnostico == diagnostico.id) & (db.respuesta.created_by == auth.user.id)).count()\n\n            if len(preguntas) > contador:\n                pregunta = preguntas[contador]\n                respuesta = db.respuesta.insert(diagnostico=diagnostico.id)\n                response.headers[\'web2py-component-flash\']=T(\'Siguiente Pregunta\')\n\n        return dict(pregunta=pregunta, respuesta=respuesta)\n    else:\n        raise HTTP(403)\n\ndef guardar_respuesta():\n    \'\'\'\n    Guardar una pregunta, petici\xc3\xb3n ajax\n    \'\'\'\n    import gluon.contrib.simplejson\n\n    if request.ajax:\n        variables_post = request.post_vars\n        print variables_post.respuesta\n        response.headers[\'web2py-component-flash\']=T(\'Respuesta Guardada\')\n        return gluon.contrib.simplejson.dumps({\'estado\': True})\n    else:\n        return gluon.contrib.simplejson.dumps({\'estado\': False})\n\ndef get_tiempo():\n    \'\'\'\n    Guardar una pregunta, petici\xc3\xb3n ajax\n    \'\'\'\n    import gluon.contrib.simplejson\n\n    if request.ajax:\n        diagnostico = db.diagnostico(request.vars.diagnostico)\n        respuesta = diagnostico.respuesta.select().first()\n        if respuesta:\n            \n            time = request.now - respuesta.created_on\n            \n            print time\n            return gluon.contrib.simplejson.dumps({\'time\': time})\n        return gluon.contrib.simplejson.dumps({\'time\': 0})\n    else:\n        return gluon.contrib.simplejson.dumps({\'time\': None})\n\n@auth.requires_membership("Estudiante")\ndef cuestionario_diagnostico():\n    response.flash = T("Cuestionario de diagn\xc3\xb3stico")\n    response.title = T("Cuestionario de diagn\xc3\xb3stico") + response.title\n\n    diagnostico = db((db.diagnostico.activo == True) & (db.diagnostico.tipo == 0)).select().first()\n\n    return dict(diagnostico=diagnostico)\n\ndef diag_alternada():\n\n    response.title = T("Atenci\xc3\xb3n Alternada") + response.title\n    return dict()\n\ndef diag_dividida():\n\n    response.title = T("Atenci\xc3\xb3n Dividida") + response.title\n    return dict()\n\ndef diag_enfocada():\n\n    response.title = T("Atenci\xc3\xb3n Enfocada") + response.title\n    return dict()\n\ndef diag_selectiva():\n\n    response.title = T("Atenci\xc3\xb3n Selectiva") + response.title\n    return dict()\n\ndef diag_sostenida():\n\n    response.title = T("Atenci\xc3\xb3n Sostenida") + response.title\n    return dict()\n\ndef resultado_general():\n    response.flash = T("Resultado General")\n    response.title = T("Resultado General") + response.title\n    return dict()\n\ndef resultado_alternada():\n\n    response.title = T("Atenci\xc3\xb3n Alternada") + response.title\n    return dict()\n\ndef resultado_dividida():\n\n    response.title = T("Atenci\xc3\xb3n Dividida") + response.title\n    return dict()\n\ndef resultado_enfocada():\n\n    response.title = T("Atenci\xc3\xb3n Enfocada") + response.title\n    return dict()\n\ndef resultado_selectiva():\n\n    response.title = T("Atenci\xc3\xb3n Selectiva") + response.title\n    return dict()\n\ndef resultado_sostenida():\n\n    response.title = T("Atenci\xc3\xb3n Sostenida") + response.title\n    return dict()\n\nresponse._vars=response._caller(get_tiempo)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/opt/python/web2py-files/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/opt/python/web2py-files/web2py/applications/proyect/controllers/estudiante.py", line 122, in <module>\n  File "/opt/python/web2py-files/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/opt/python/web2py-files/web2py/applications/proyect/controllers/estudiante.py", line 53, in get_tiempo\n    return gluon.contrib.simplejson.dumps({\'time\': time})\n  File "/opt/python/web2py-files/web2py/gluon/contrib/simplejson/__init__.py", line 263, in dumps\n    return _default_encoder.encode(obj)\n  File "/opt/python/web2py-files/web2py/gluon/contrib/simplejson/encoder.py", line 217, in encode\n    chunks = list(chunks)\n  File "/opt/python/web2py-files/web2py/gluon/contrib/simplejson/encoder.py", line 486, in _iterencode\n    for chunk in _iterencode_dict(o, _current_indent_level):\n  File "/opt/python/web2py-files/web2py/gluon/contrib/simplejson/encoder.py", line 460, in _iterencode_dict\n    for chunk in chunks:\n  File "/opt/python/web2py-files/web2py/gluon/contrib/simplejson/encoder.py", line 496, in _iterencode\n    o = _default(o)\n  File "/opt/python/web2py-files/web2py/gluon/contrib/simplejson/encoder.py", line 191, in default\n    raise TypeError(repr(o) + " is not JSON serializable")\nTypeError: datetime.timedelta(0, 1775, 431058) is not JSON serializable\n'
p11
s.