# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations
def get_pregunta():
    '''
    Componente que devuelve las preguntas de un tipo dado para el cuestionario activo
    '''
    if request.cid:
        preguntas=None
        if request.args(1) == "2-) Orientación":
            preguntas = db(db.orientacion.id > 0).select()
        elif request.args(1) == "3.1-) Atención y concentración/Dígitos en Regresión":
            preguntas = db(db.digitos_regresion.id > 0).select()
        elif request.args(1) == "3.2-) Atención y concentración/Detección Visual":
            preguntas = db(db.deteccion_visual.id > 0).select()
        elif request.args(1) == "3.3-) Atención y concentración/20-3":
            preguntas = "20-3"
        elif request.args(1) == "4-) Codificación/Memoria verbal":
            preguntas = db(db.memoria_verbal.id > 0).select()
        elif request.args(1) == "5-) Lenguaje":
            preguntas = db(db.imagen_lenguaje.id > 0).select()
        elif request.args(1) == "5.1-) Lenguaje/Repetición":
            preguntas = db(db.repeticion_lenguaje.id > 0).select()
        elif request.args(1) == "5.2-) Lenguaje/Comprensión":
            preguntas = db(db.comprension_lenguaje.id > 0).select()
        elif request.args(1) == "5.3-) Lenguaje/Fluidez verbal":
            preguntas = db(db.fluidez_verbal.id > 0).select()
        elif request.args(1) == "6.1-) Funciones ejecutivas/Semejanzas":
            preguntas = db(db.semejanza.id > 0).select()
        elif request.args(1) == "6.2-) Funciones ejecutivas/Cálculo":
            preguntas = db(db.calculo.id > 0).select()
        elif request.args(1) == "6.3-) Funciones ejecutivas/Secuenciación":
            preguntas = db(db.secuencia.id > 0).select()
        elif request.args(1) == "7.1-) Funciones de evocación/Memoria verbal espontanea":
            preguntas = db(db.mv_espontanea.id > 0).select()
            

        return dict(preguntas=preguntas)
    else:
        raise HTTP(403)

@auth.requires_membership("Especialista")
def gestionar_diagnostico():
    '''
    CRUD completo para gestionar diagnosticos kike tiene que ser asi
    '''

    diagnostico = preguntas = selectable = orderby = total_puntos = fields = None
    links = []

    if ("view" in request.args):
        diagnostico = db.diagnostico(request.args(-1))

    grid = SQLFORM.smartgrid(db.diagnostico, selectable=selectable, create=False, linked_tables=[], links=links, fields=fields, orderby=orderby)

    heading=grid.elements('th')
    if heading:
           heading[0].append(INPUT(_type='checkbox', _onclick="$('input[type=checkbox]').each(function(k){$(this).attr('checked', 'checked');});"))

    return dict(grid=grid, diagnostico=diagnostico)

@auth.requires_membership("Especialista")
def nuevo_diagnostico_inicial():
    response.flash = T("Nuevo Diagnóstico Inicial")
    response.title = T("Nuevo Diagnóstico Inicial") + response.title

    form = SQLFORM(db.diagnostico, fields=['titulo', 'descripcion', 'activo', 'tiempo', 'secciones'])

    if form.validate():
        diagnostico = dict(form.vars)
        diagnostico['tipo'] = 0
        form.vars.id = db.diagnostico.insert(**diagnostico)
        response.flash = T('Nuevo cuestionario Diagnóstico Inicial insertado')

    elif form.errors:
        response.flash = T('El formulario tiene errores')
    else:
        response.flash = T('Por favor complete el formulario')
    return dict(form=form)
